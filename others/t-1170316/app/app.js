"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./bundle-config");
var application = require("application");
var LocalNotifications = require("nativescript-local-notifications");
var WS = require("nativescript-websockets");
var mySocket;
application.on(application.launchEvent, function (args) {
    LocalNotifications.hasPermission();
    mySocket = new WS("ws://echo.websocket.org", { protocols: [], timeout: 6000, allowCellular: true, headers: { 'Authorization': 'Basic ...' } });
    mySocket.on('open', function (socket) { console.log("Hey I'm open"); socket.send("Hello"); });
    mySocket.on('message', function (socket, message) {
        console.log("Got a message", message);
        LocalNotifications.schedule([{
                id: 3,
                title: 'Hi',
                body: 'You should see a \'3\' somewhere',
                at: new Date(new Date().getTime() + 10 * 1000),
                badge: 3
            }]).then(function () {
            alert({
                title: "Notification scheduled",
                message: 'ID: 3',
                okButtonText: "OK, thanks"
            });
        }, function (error) {
            console.log("doScheduleAndSetBadgeNumber error: " + error);
        });
    });
    mySocket.on('close', function (socket, code, reason) { console.log("Socket was closed because: ", reason, " code: ", code); });
    mySocket.on('error', function (socket, error) { console.log("Socket had an error", error); });
});
application.on(application.resumeEvent, function (args) {
    mySocket.open();
    console.log("RESUME");
});
application.on(application.suspendEvent, function (args) {
    mySocket.close();
    console.log("SUSPEND");
});
application.run({ moduleName: 'app-root' });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkJBQXlCO0FBQ3pCLHlDQUEyQztBQUMzQyxxRUFBdUU7QUFFdkUsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFFOUMsSUFBSSxRQUFhLENBQUM7QUFFbEIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFVBQUMsSUFBSTtJQUN6QyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUVsQyxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUMseUJBQXlCLEVBQUMsRUFBQyxTQUFTLEVBQUUsRUFBdUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUNqSyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLE1BQU0sSUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUMsTUFBTSxFQUFFLE9BQU87UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFdEMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3pCLEVBQUUsRUFBRSxDQUFDO2dCQUNMLEtBQUssRUFBRSxJQUFJO2dCQUNYLElBQUksRUFBRSxrQ0FBa0M7Z0JBQ3hDLEVBQUUsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBQyxJQUFJLENBQUM7Z0JBQzVDLEtBQUssRUFBRSxDQUFDO2FBQ1QsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNKO1lBQ0UsS0FBSyxDQUFDO2dCQUNKLEtBQUssRUFBRSx3QkFBd0I7Z0JBQy9CLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixZQUFZLEVBQUUsWUFBWTthQUMzQixDQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsVUFBQyxLQUFLO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQ0osQ0FBQztJQUVSLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sSUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6SCxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLE1BQU0sRUFBRSxLQUFLLElBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUMsQ0FBQyxDQUFDO0FBRUgsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFVBQUMsSUFBSTtJQUN6QyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxVQUFDLElBQUk7SUFDMUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2J1bmRsZS1jb25maWdcIjtcbmltcG9ydCAqIGFzIGFwcGxpY2F0aW9uIGZyb20gJ2FwcGxpY2F0aW9uJztcbmltcG9ydCAqIGFzIExvY2FsTm90aWZpY2F0aW9ucyBmcm9tIFwibmF0aXZlc2NyaXB0LWxvY2FsLW5vdGlmaWNhdGlvbnNcIjtcblxuY29uc3QgV1MgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXdlYnNvY2tldHNcIik7XG5cbmxldCBteVNvY2tldDogYW55O1xuXG5hcHBsaWNhdGlvbi5vbihhcHBsaWNhdGlvbi5sYXVuY2hFdmVudCwgKGFyZ3MpID0+IHtcbiAgICBMb2NhbE5vdGlmaWNhdGlvbnMuaGFzUGVybWlzc2lvbigpXG5cbiAgICBteVNvY2tldCA9IG5ldyBXUyhcIndzOi8vZWNoby53ZWJzb2NrZXQub3JnXCIse3Byb3RvY29sczogWy8qICdjaGF0JywgJ3ZpZGVvJyAqL10sIHRpbWVvdXQ6IDYwMDAsIGFsbG93Q2VsbHVsYXI6IHRydWUsIGhlYWRlcnM6IHsgJ0F1dGhvcml6YXRpb24nOiAnQmFzaWMgLi4uJyB9fSk7XG4gICAgbXlTb2NrZXQub24oJ29wZW4nLCAoc29ja2V0KSA9PiB7IGNvbnNvbGUubG9nKFwiSGV5IEknbSBvcGVuXCIpOyBzb2NrZXQuc2VuZChcIkhlbGxvXCIpOyB9KTtcbiAgICBteVNvY2tldC5vbignbWVzc2FnZScsIChzb2NrZXQsIG1lc3NhZ2UpID0+IHsgXG4gICAgICAgIGNvbnNvbGUubG9nKFwiR290IGEgbWVzc2FnZVwiLCBtZXNzYWdlKTsgXG5cbiAgICAgICAgTG9jYWxOb3RpZmljYXRpb25zLnNjaGVkdWxlKFt7XG4gICAgICAgICAgICBpZDogMyxcbiAgICAgICAgICAgIHRpdGxlOiAnSGknLFxuICAgICAgICAgICAgYm9keTogJ1lvdSBzaG91bGQgc2VlIGEgXFwnM1xcJyBzb21ld2hlcmUnLFxuICAgICAgICAgICAgYXQ6IG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgMTAqMTAwMCksXG4gICAgICAgICAgICBiYWRnZTogM1xuICAgICAgICAgIH1dKS50aGVuKFxuICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnQoe1xuICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiTm90aWZpY2F0aW9uIHNjaGVkdWxlZFwiLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0lEOiAzJyxcbiAgICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJPSywgdGhhbmtzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSwoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImRvU2NoZWR1bGVBbmRTZXRCYWRnZU51bWJlciBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuXG4gICAgfSk7XG4gICAgbXlTb2NrZXQub24oJ2Nsb3NlJywgKHNvY2tldCwgY29kZSwgcmVhc29uKSA9PiB7IGNvbnNvbGUubG9nKFwiU29ja2V0IHdhcyBjbG9zZWQgYmVjYXVzZTogXCIsIHJlYXNvbiwgXCIgY29kZTogXCIsIGNvZGUpOyB9KTtcbiAgICBteVNvY2tldC5vbignZXJyb3InLCAoc29ja2V0LCBlcnJvcikgPT4geyBjb25zb2xlLmxvZyhcIlNvY2tldCBoYWQgYW4gZXJyb3JcIiwgZXJyb3IpO30pO1xufSk7XG5cbmFwcGxpY2F0aW9uLm9uKGFwcGxpY2F0aW9uLnJlc3VtZUV2ZW50LCAoYXJncykgPT4ge1xuICAgIG15U29ja2V0Lm9wZW4oKTtcblxuICAgIGNvbnNvbGUubG9nKFwiUkVTVU1FXCIpO1xufSk7XG5cbmFwcGxpY2F0aW9uLm9uKGFwcGxpY2F0aW9uLnN1c3BlbmRFdmVudCwgKGFyZ3MpID0+IHtcbiAgICBteVNvY2tldC5jbG9zZSgpO1xuXG4gICAgY29uc29sZS5sb2coXCJTVVNQRU5EXCIpO1xufSk7XG5cbmFwcGxpY2F0aW9uLnJ1bih7IG1vZHVsZU5hbWU6ICdhcHAtcm9vdCcgfSk7Il19