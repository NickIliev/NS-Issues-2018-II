"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./bundle-config");
var application = require("application");
var LocalNotifications = require("nativescript-local-notifications");
var WS = require("nativescript-websockets");
var mySocket;
application.on(application.launchEvent, function (args) {
    LocalNotifications.hasPermission();
    mySocket = new WS("ws://echo.websocket.org", { protocols: [], timeout: 10000, allowCellular: true, headers: { 'Authorization': 'Basic ...' } });
    mySocket.on('open', function (socket) { console.log("Hey I'm open"); socket.send("Hello"); });
    mySocket.on('message', function (socket, message) {
        console.log("Got a message", message);
        LocalNotifications.addOnMessageReceivedCallback(function (notificationData) {
            alert({
                title: "Notification received",
                message: "ID: " + notificationData.id +
                    "\nTitle: " + notificationData.title +
                    "\nBody: " + notificationData.body,
                okButtonText: "Excellent!"
            });
        }).then(function () {
            alert({
                title: "Listener added",
                message: "We'll let you know when a notification is received.",
                okButtonText: "Nice :)"
            });
        });
        LocalNotifications.schedule([{
                id: 3,
                title: 'Hi',
                body: 'You should see a \'3\' somewhere',
                at: new Date(new Date().getTime() + 10 * 1000),
                badge: 3
            }]).then(function () {
            alert({
                title: "Notification scheduled",
                message: 'ID: 3',
                okButtonText: "OK, thanks"
            });
        }, function (error) {
            console.log("doScheduleAndSetBadgeNumber error: " + error);
        });
    });
    mySocket.on('close', function (socket, code, reason) { console.log("Socket was closed because: ", reason, " code: ", code); });
    mySocket.on('error', function (socket, error) { console.log("Socket had an error", error); });
});
application.on(application.resumeEvent, function (args) {
    mySocket.open();
    console.log("RESUME");
});
application.on(application.suspendEvent, function (args) {
    mySocket.close();
    console.log("SUSPEND");
});
application.run({ moduleName: 'app-root' });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkJBQXlCO0FBQ3pCLHlDQUEyQztBQUMzQyxxRUFBdUU7QUFFdkUsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFFOUMsSUFBSSxRQUFhLENBQUM7QUFFbEIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFVBQUMsSUFBSTtJQUN6QyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUVsQyxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUMseUJBQXlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBdUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNySyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLE1BQU0sSUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUMsTUFBTSxFQUFFLE9BQU87UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFdEMsa0JBQWtCLENBQUMsNEJBQTRCLENBQUMsVUFBQyxnQkFBZ0I7WUFFN0QsS0FBSyxDQUFDO2dCQUNGLEtBQUssRUFBRSx1QkFBdUI7Z0JBQzlCLE9BQU8sRUFBRSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsRUFBRTtvQkFDakMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLEtBQUs7b0JBQ3BDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJO2dCQUN0QyxZQUFZLEVBQUUsWUFBWTthQUM3QixDQUFDLENBQUM7UUFDUCxDQUFDLENBQ0EsQ0FBQyxJQUFJLENBQUM7WUFDSCxLQUFLLENBQUM7Z0JBQ0YsS0FBSyxFQUFFLGdCQUFnQjtnQkFDdkIsT0FBTyxFQUFFLHFEQUFxRDtnQkFDOUQsWUFBWSxFQUFFLFNBQVM7YUFDMUIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUNBLENBQUM7UUFHRixrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDekIsRUFBRSxFQUFFLENBQUM7Z0JBQ0wsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsSUFBSSxFQUFFLGtDQUFrQztnQkFDeEMsRUFBRSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDOUMsS0FBSyxFQUFFLENBQUM7YUFDWCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ0o7WUFDSSxLQUFLLENBQUM7Z0JBQ0YsS0FBSyxFQUFFLHdCQUF3QjtnQkFDL0IsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLFlBQVksRUFBRSxZQUFZO2FBQzdCLENBQUMsQ0FBQztRQUNQLENBQUMsRUFBRSxVQUFDLEtBQUs7WUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FDSixDQUFDO0lBRU4sQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxJQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pILFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsTUFBTSxFQUFFLEtBQUssSUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUYsQ0FBQyxDQUFDLENBQUM7QUFFSCxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsVUFBQyxJQUFJO0lBQ3pDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVoQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQyxDQUFDO0FBRUgsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLFVBQUMsSUFBSTtJQUMxQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vYnVuZGxlLWNvbmZpZ1wiO1xuaW1wb3J0ICogYXMgYXBwbGljYXRpb24gZnJvbSAnYXBwbGljYXRpb24nO1xuaW1wb3J0ICogYXMgTG9jYWxOb3RpZmljYXRpb25zIGZyb20gXCJuYXRpdmVzY3JpcHQtbG9jYWwtbm90aWZpY2F0aW9uc1wiO1xuXG5jb25zdCBXUyA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtd2Vic29ja2V0c1wiKTtcblxubGV0IG15U29ja2V0OiBhbnk7XG5cbmFwcGxpY2F0aW9uLm9uKGFwcGxpY2F0aW9uLmxhdW5jaEV2ZW50LCAoYXJncykgPT4ge1xuICAgIExvY2FsTm90aWZpY2F0aW9ucy5oYXNQZXJtaXNzaW9uKClcblxuICAgIG15U29ja2V0ID0gbmV3IFdTKFwid3M6Ly9lY2hvLndlYnNvY2tldC5vcmdcIiwgeyBwcm90b2NvbHM6IFsvKiAnY2hhdCcsICd2aWRlbycgKi9dLCB0aW1lb3V0OiAxMDAwMCwgYWxsb3dDZWxsdWxhcjogdHJ1ZSwgaGVhZGVyczogeyAnQXV0aG9yaXphdGlvbic6ICdCYXNpYyAuLi4nIH0gfSk7XG4gICAgbXlTb2NrZXQub24oJ29wZW4nLCAoc29ja2V0KSA9PiB7IGNvbnNvbGUubG9nKFwiSGV5IEknbSBvcGVuXCIpOyBzb2NrZXQuc2VuZChcIkhlbGxvXCIpOyB9KTtcbiAgICBteVNvY2tldC5vbignbWVzc2FnZScsIChzb2NrZXQsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJHb3QgYSBtZXNzYWdlXCIsIG1lc3NhZ2UpO1xuXG4gICAgICAgIExvY2FsTm90aWZpY2F0aW9ucy5hZGRPbk1lc3NhZ2VSZWNlaXZlZENhbGxiYWNrKChub3RpZmljYXRpb25EYXRhKSA9PiB7XG5cbiAgICAgICAgICAgIGFsZXJ0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJOb3RpZmljYXRpb24gcmVjZWl2ZWRcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIklEOiBcIiArIG5vdGlmaWNhdGlvbkRhdGEuaWQgK1xuICAgICAgICAgICAgICAgICAgICBcIlxcblRpdGxlOiBcIiArIG5vdGlmaWNhdGlvbkRhdGEudGl0bGUgK1xuICAgICAgICAgICAgICAgICAgICBcIlxcbkJvZHk6IFwiICsgbm90aWZpY2F0aW9uRGF0YS5ib2R5LFxuICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJFeGNlbGxlbnQhXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgICkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBhbGVydCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiTGlzdGVuZXIgYWRkZWRcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIldlJ2xsIGxldCB5b3Uga25vdyB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2VpdmVkLlwiLFxuICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJOaWNlIDopXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgICk7XG5cblxuICAgICAgICBMb2NhbE5vdGlmaWNhdGlvbnMuc2NoZWR1bGUoW3tcbiAgICAgICAgICAgIGlkOiAzLFxuICAgICAgICAgICAgdGl0bGU6ICdIaScsXG4gICAgICAgICAgICBib2R5OiAnWW91IHNob3VsZCBzZWUgYSBcXCczXFwnIHNvbWV3aGVyZScsXG4gICAgICAgICAgICBhdDogbmV3IERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkgKyAxMCAqIDEwMDApLFxuICAgICAgICAgICAgYmFkZ2U6IDNcbiAgICAgICAgfV0pLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJOb3RpZmljYXRpb24gc2NoZWR1bGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJRDogMycsXG4gICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJPSywgdGhhbmtzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZG9TY2hlZHVsZUFuZFNldEJhZGdlTnVtYmVyIGVycm9yOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgIH0pO1xuICAgIG15U29ja2V0Lm9uKCdjbG9zZScsIChzb2NrZXQsIGNvZGUsIHJlYXNvbikgPT4geyBjb25zb2xlLmxvZyhcIlNvY2tldCB3YXMgY2xvc2VkIGJlY2F1c2U6IFwiLCByZWFzb24sIFwiIGNvZGU6IFwiLCBjb2RlKTsgfSk7XG4gICAgbXlTb2NrZXQub24oJ2Vycm9yJywgKHNvY2tldCwgZXJyb3IpID0+IHsgY29uc29sZS5sb2coXCJTb2NrZXQgaGFkIGFuIGVycm9yXCIsIGVycm9yKTsgfSk7XG59KTtcblxuYXBwbGljYXRpb24ub24oYXBwbGljYXRpb24ucmVzdW1lRXZlbnQsIChhcmdzKSA9PiB7XG4gICAgbXlTb2NrZXQub3BlbigpO1xuXG4gICAgY29uc29sZS5sb2coXCJSRVNVTUVcIik7XG59KTtcblxuYXBwbGljYXRpb24ub24oYXBwbGljYXRpb24uc3VzcGVuZEV2ZW50LCAoYXJncykgPT4ge1xuICAgIG15U29ja2V0LmNsb3NlKCk7XG5cbiAgICBjb25zb2xlLmxvZyhcIlNVU1BFTkRcIik7XG59KTtcblxuYXBwbGljYXRpb24ucnVuKHsgbW9kdWxlTmFtZTogJ2FwcC1yb290JyB9KTsiXX0=