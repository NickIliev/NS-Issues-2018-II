"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./bundle-config");
var application = require("application");
var LocalNotifications = require("nativescript-local-notifications");
var WS = require("nativescript-websockets");
var mySocket;
application.on(application.launchEvent, function (args) {
    LocalNotifications.hasPermission();
    mySocket = new WS("ws://echo.websocket.org", { protocols: [], timeout: 10000, allowCellular: true, headers: { 'Authorization': 'Basic ...' } });
    mySocket.on('open', function (socket) { console.log("Hey I'm open"); socket.send("Hello"); });
    mySocket.on('message', function (socket, message) {
        console.log("Got a message", message);
        LocalNotifications.addOnMessageReceivedCallback(function (notificationData) {
            alert({
                title: "Notification received",
                message: "ID: " + notificationData.id +
                    "\nTitle: " + notificationData.title +
                    "\nBody: " + notificationData.body,
                okButtonText: "Excellent!"
            });
        }).then(function () {
            alert({
                title: "Listener added",
                message: "We'll let you know when a notification is received.",
                okButtonText: "Nice :)"
            });
        });
        LocalNotifications.schedule([{
                id: 3,
                title: 'Hi',
                body: 'You should see a \'3\' somewhere',
                at: new Date(new Date().getTime() + 10 * 1000),
                badge: 3
            }]).then(function () {
            alert({
                title: "Notification scheduled",
                message: 'ID: 3',
                okButtonText: "OK, thanks"
            });
        }, function (error) {
            console.log("doScheduleAndSetBadgeNumber error: " + error);
        });
    });
    mySocket.on('close', function (socket, code, reason) { console.log("Socket was closed because: ", reason, " code: ", code); });
    mySocket.on('error', function (socket, error) { console.log("Socket had an error", error); });
});
application.on(application.resumeEvent, function (args) {
    mySocket.open();
    console.log("RESUME");
});
application.on(application.suspendEvent, function (args) {
    mySocket.close();
    console.log("SUSPEND");
});
application.run({ moduleName: 'app-root' });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkJBQXlCO0FBQ3pCLHlDQUEyQztBQUMzQyxxRUFBdUU7QUFFdkUsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFFOUMsSUFBSSxRQUFhLENBQUM7QUFFbEIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFVBQUMsSUFBSTtJQUN6QyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUVsQyxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUMseUJBQXlCLEVBQUMsRUFBQyxTQUFTLEVBQUUsRUFBdUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUNsSyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLE1BQU0sSUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUMsTUFBTSxFQUFFLE9BQU87UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFdEMsa0JBQWtCLENBQUMsNEJBQTRCLENBQzNDLFVBQVUsZ0JBQWdCO1lBQ3hCLEtBQUssQ0FBQztnQkFDSixLQUFLLEVBQUUsdUJBQXVCO2dCQUM5QixPQUFPLEVBQUUsTUFBTSxHQUFHLGdCQUFnQixDQUFDLEVBQUU7b0JBQ2pDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLO29CQUNuQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsSUFBSTtnQkFDdkMsWUFBWSxFQUFFLFlBQVk7YUFDM0IsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUNKLENBQUMsSUFBSSxDQUNGO1lBQ0UsS0FBSyxDQUFDO2dCQUNKLEtBQUssRUFBRSxnQkFBZ0I7Z0JBQ3ZCLE9BQU8sRUFBRSxxREFBcUQ7Z0JBQzlELFlBQVksRUFBRSxTQUFTO2FBQ3hCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FDSixDQUFDO1FBR0Ysa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3pCLEVBQUUsRUFBRSxDQUFDO2dCQUNMLEtBQUssRUFBRSxJQUFJO2dCQUNYLElBQUksRUFBRSxrQ0FBa0M7Z0JBQ3hDLEVBQUUsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBQyxJQUFJLENBQUM7Z0JBQzVDLEtBQUssRUFBRSxDQUFDO2FBQ1QsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNKO1lBQ0UsS0FBSyxDQUFDO2dCQUNKLEtBQUssRUFBRSx3QkFBd0I7Z0JBQy9CLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixZQUFZLEVBQUUsWUFBWTthQUMzQixDQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsVUFBQyxLQUFLO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQ0osQ0FBQztJQUVSLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sSUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6SCxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLE1BQU0sRUFBRSxLQUFLLElBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUMsQ0FBQyxDQUFDO0FBRUgsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFVBQUMsSUFBSTtJQUN6QyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxVQUFDLElBQUk7SUFDMUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2J1bmRsZS1jb25maWdcIjtcbmltcG9ydCAqIGFzIGFwcGxpY2F0aW9uIGZyb20gJ2FwcGxpY2F0aW9uJztcbmltcG9ydCAqIGFzIExvY2FsTm90aWZpY2F0aW9ucyBmcm9tIFwibmF0aXZlc2NyaXB0LWxvY2FsLW5vdGlmaWNhdGlvbnNcIjtcblxuY29uc3QgV1MgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXdlYnNvY2tldHNcIik7XG5cbmxldCBteVNvY2tldDogYW55O1xuXG5hcHBsaWNhdGlvbi5vbihhcHBsaWNhdGlvbi5sYXVuY2hFdmVudCwgKGFyZ3MpID0+IHtcbiAgICBMb2NhbE5vdGlmaWNhdGlvbnMuaGFzUGVybWlzc2lvbigpXG5cbiAgICBteVNvY2tldCA9IG5ldyBXUyhcIndzOi8vZWNoby53ZWJzb2NrZXQub3JnXCIse3Byb3RvY29sczogWy8qICdjaGF0JywgJ3ZpZGVvJyAqL10sIHRpbWVvdXQ6IDEwMDAwLCBhbGxvd0NlbGx1bGFyOiB0cnVlLCBoZWFkZXJzOiB7ICdBdXRob3JpemF0aW9uJzogJ0Jhc2ljIC4uLicgfX0pO1xuICAgIG15U29ja2V0Lm9uKCdvcGVuJywgKHNvY2tldCkgPT4geyBjb25zb2xlLmxvZyhcIkhleSBJJ20gb3BlblwiKTsgc29ja2V0LnNlbmQoXCJIZWxsb1wiKTsgfSk7XG4gICAgbXlTb2NrZXQub24oJ21lc3NhZ2UnLCAoc29ja2V0LCBtZXNzYWdlKSA9PiB7IFxuICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBhIG1lc3NhZ2VcIiwgbWVzc2FnZSk7IFxuXG4gICAgICAgIExvY2FsTm90aWZpY2F0aW9ucy5hZGRPbk1lc3NhZ2VSZWNlaXZlZENhbGxiYWNrKFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5vdGlmaWNhdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgYWxlcnQoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIk5vdGlmaWNhdGlvbiByZWNlaXZlZFwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiSUQ6IFwiICsgbm90aWZpY2F0aW9uRGF0YS5pZCArXG4gICAgICAgICAgICAgICAgICAgIFwiXFxuVGl0bGU6IFwiICsgbm90aWZpY2F0aW9uRGF0YS50aXRsZSArXG4gICAgICAgICAgICAgICAgICAgICBcIlxcbkJvZHk6IFwiICsgbm90aWZpY2F0aW9uRGF0YS5ib2R5LFxuICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJFeGNlbGxlbnQhXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICkudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBhbGVydCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiTGlzdGVuZXIgYWRkZWRcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIldlJ2xsIGxldCB5b3Uga25vdyB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2VpdmVkLlwiLFxuICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJOaWNlIDopXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cblxuICAgICAgICBMb2NhbE5vdGlmaWNhdGlvbnMuc2NoZWR1bGUoW3tcbiAgICAgICAgICAgIGlkOiAzLFxuICAgICAgICAgICAgdGl0bGU6ICdIaScsXG4gICAgICAgICAgICBib2R5OiAnWW91IHNob3VsZCBzZWUgYSBcXCczXFwnIHNvbWV3aGVyZScsXG4gICAgICAgICAgICBhdDogbmV3IERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkgKyAxMCoxMDAwKSxcbiAgICAgICAgICAgIGJhZGdlOiAzXG4gICAgICAgICAgfV0pLnRoZW4oXG4gICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBhbGVydCh7XG4gICAgICAgICAgICAgICAgICB0aXRsZTogXCJOb3RpZmljYXRpb24gc2NoZWR1bGVkXCIsXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSUQ6IDMnLFxuICAgICAgICAgICAgICAgICAgb2tCdXR0b25UZXh0OiBcIk9LLCB0aGFua3NcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZG9TY2hlZHVsZUFuZFNldEJhZGdlTnVtYmVyIGVycm9yOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG5cbiAgICB9KTtcbiAgICBteVNvY2tldC5vbignY2xvc2UnLCAoc29ja2V0LCBjb2RlLCByZWFzb24pID0+IHsgY29uc29sZS5sb2coXCJTb2NrZXQgd2FzIGNsb3NlZCBiZWNhdXNlOiBcIiwgcmVhc29uLCBcIiBjb2RlOiBcIiwgY29kZSk7IH0pO1xuICAgIG15U29ja2V0Lm9uKCdlcnJvcicsIChzb2NrZXQsIGVycm9yKSA9PiB7IGNvbnNvbGUubG9nKFwiU29ja2V0IGhhZCBhbiBlcnJvclwiLCBlcnJvcik7fSk7XG59KTtcblxuYXBwbGljYXRpb24ub24oYXBwbGljYXRpb24ucmVzdW1lRXZlbnQsIChhcmdzKSA9PiB7XG4gICAgbXlTb2NrZXQub3BlbigpO1xuXG4gICAgY29uc29sZS5sb2coXCJSRVNVTUVcIik7XG59KTtcblxuYXBwbGljYXRpb24ub24oYXBwbGljYXRpb24uc3VzcGVuZEV2ZW50LCAoYXJncykgPT4ge1xuICAgIG15U29ja2V0LmNsb3NlKCk7XG5cbiAgICBjb25zb2xlLmxvZyhcIlNVU1BFTkRcIik7XG59KTtcblxuYXBwbGljYXRpb24ucnVuKHsgbW9kdWxlTmFtZTogJ2FwcC1yb290JyB9KTsiXX0=