"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./bundle-config");
var application = require("application");
application.on(application.launchEvent, function (args) {
    if (args.android) {
        // For Android applications, args.android is an android.content.Intent class.
        console.log("Launched Android application with the following intent: " + args.android + ".");
    }
    else if (args.ios !== undefined) {
        // For iOS applications, args.ios is NSDictionary (launchOptions).
        console.log("Launched iOS application with options: " + args.ios);
    }
});
application.on(application.suspendEvent, function (args) {
    if (args.android) {
        // For Android applications, args.android is an android activity class.
        console.log("SUSPEND: " + args.android);
    }
    else if (args.ios) {
        // For iOS applications, args.ios is UIApplication.
        console.log("SUSPEND EVENT: " + args.ios);
    }
});
application.on(application.resumeEvent, function (args) {
    if (args.android) {
        // For Android applications, args.android is an android activity class.
        console.log("RESUME: " + args.android);
    }
    else if (args.ios) {
        // For iOS applications, args.ios is UIApplication.
        console.log("RESUME EVENT: " + args.ios);
    }
});
application.on(application.displayedEvent, function (args) {
    // args is of type ApplicaitonEventData
    console.log("displayedEvent");
});
application.on(application.orientationChangedEvent, function (args) {
    // args is of type OrientationChangedEventData
    console.log("ORIENTATION: ", args.newValue); // "portrait", "landscape", "unknown"
});
application.on(application.exitEvent, function (args) {
    if (args.android) {
        // For Android applications, args.android is an android activity class.
        console.log("EXIT: " + args.android);
    }
    else if (args.ios) {
        // For iOS applications, args.ios is UIApplication.
        console.log("EXIT EVENT: " + args.ios);
    }
});
application.on(application.lowMemoryEvent, function (args) {
    if (args.android) {
        // For Android applications, args.android is an android activity class.
        console.log("LOW MEMORY: " + args.android);
    }
    else if (args.ios) {
        // For iOS applications, args.ios is UIApplication.
        console.log("LOW MEMORY: " + args.ios);
    }
});
application.on(application.uncaughtErrorEvent, function (args) {
    console.log("Uncaught Error: " + args.error);
});
var application_1 = require("application");
var MyDelegate = /** @class */ (function (_super) {
    __extends(MyDelegate, _super);
    function MyDelegate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MyDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {
        console.log("applicationWillFinishLaunchingWithOptions: " + launchOptions);
        return true;
    };
    MyDelegate.prototype.applicationWillTerminate = function (application) {
        console.log("WILL TERMINATE !!!");
        console.log("applicationWillTerminate: ", application);
    };
    MyDelegate.prototype.applicationDidBecomeActive = function (application) {
        console.log("applicationDidBecomeActive: " + application);
    };
    MyDelegate.ObjCProtocols = [UIApplicationDelegate];
    return MyDelegate;
}(UIResponder));
application_1.ios.delegate = MyDelegate;
application.run({ moduleName: 'app-root' });
/*
Do not place any code after the application has been started as it will not
be executed on iOS.
*/
//# sourceMappingURL=data:application/json;base64,