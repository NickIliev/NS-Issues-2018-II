"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = require("tns-core-modules/application");
var frame_1 = require("tns-core-modules/ui/frame");
var tabView;
var drawer;
function onTabLoaded(args) {
    tabView = args.object;
}
exports.onTabLoaded = onTabLoaded;
function navigateInFirstTab(args) {
    var component = args.object;
    var componentRoute = component.get("route");
    var firstFrame = frame_1.getFrameById("first-tab-frame");
    firstFrame.navigate({
        moduleName: componentRoute,
        transition: {
            name: "fade"
        }
    });
    tabView.selectedIndex = 0; // explicitly change the tab in which we are currently navigating
    drawer = app.getRootView();
    drawer.closeDrawer(); // explicitly closing the drawer after the navigation is triggered
}
exports.navigateInFirstTab = navigateInFirstTab;
function navigateInSecondTab(args) {
    var component = args.object;
    var componentRoute = component.get("route");
    var secondFrame = frame_1.getFrameById("second-tab-frame");
    secondFrame.navigate({
        moduleName: componentRoute,
        transition: {
            name: "slide"
        }
    });
    tabView.selectedIndex = 1; // explicitly change the tab in which we are currently navigating
    drawer = app.getRootView();
    drawer.closeDrawer(); // explicitly closing the drawer after the navigation is triggered
}
exports.navigateInSecondTab = navigateInSecondTab;
function toggleDrawer() {
    drawer.toggleDrawerState();
}
exports.toggleDrawer = toggleDrawer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXJvb3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHAtcm9vdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUFvRDtBQUdwRCxtREFBeUQ7QUFJekQsSUFBSSxPQUFnQixDQUFDO0FBQ3JCLElBQUksTUFBcUIsQ0FBQztBQUUxQixxQkFBNEIsSUFBSTtJQUM1QixPQUFPLEdBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNuQyxDQUFDO0FBRkQsa0NBRUM7QUFFRCw0QkFBbUMsSUFBZTtJQUM5QyxJQUFNLFNBQVMsR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzFDLElBQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUMsSUFBSSxVQUFVLEdBQUcsb0JBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRWpELFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDaEIsVUFBVSxFQUFFLGNBQWM7UUFDMUIsVUFBVSxFQUFFO1lBQ1IsSUFBSSxFQUFFLE1BQU07U0FDZjtLQUNKLENBQUMsQ0FBQTtJQUNGLE9BQU8sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUVBQWlFO0lBRTVGLE1BQU0sR0FBa0IsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLGtFQUFrRTtBQUU1RixDQUFDO0FBakJELGdEQWlCQztBQUVELDZCQUFvQyxJQUFlO0lBQy9DLElBQU0sU0FBUyxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDMUMsSUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU5QyxJQUFJLFdBQVcsR0FBRyxvQkFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFbkQsV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUNqQixVQUFVLEVBQUUsY0FBYztRQUMxQixVQUFVLEVBQUU7WUFDUixJQUFJLEVBQUUsT0FBTztTQUNoQjtLQUNKLENBQUMsQ0FBQTtJQUNGLE9BQU8sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUVBQWlFO0lBRTVGLE1BQU0sR0FBa0IsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLGtFQUFrRTtBQUU1RixDQUFDO0FBakJELGtEQWlCQztBQUVEO0lBQ0ksTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDL0IsQ0FBQztBQUZELG9DQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uXCI7XHJcbmltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBSYWRTaWRlRHJhd2VyIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC11aS1zaWRlZHJhd2VyXCI7XHJcbmltcG9ydCB7IGdldEZyYW1lQnlJZCB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCI7XHJcbmltcG9ydCB7IEdyaWRMYXlvdXQgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2dyaWQtbGF5b3V0XCI7XHJcbmltcG9ydCB7IFRhYlZpZXcgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS90YWItdmlld1wiO1xyXG5cclxubGV0IHRhYlZpZXc6IFRhYlZpZXc7XHJcbmxldCBkcmF3ZXI6IFJhZFNpZGVEcmF3ZXI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25UYWJMb2FkZWQoYXJncykge1xyXG4gICAgdGFiVmlldyA9IDxUYWJWaWV3PmFyZ3Mub2JqZWN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGVJbkZpcnN0VGFiKGFyZ3M6IEV2ZW50RGF0YSk6IHZvaWQge1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gPEdyaWRMYXlvdXQ+YXJncy5vYmplY3Q7XHJcbiAgICBjb25zdCBjb21wb25lbnRSb3V0ZSA9IGNvbXBvbmVudC5nZXQoXCJyb3V0ZVwiKTtcclxuXHJcbiAgICBsZXQgZmlyc3RGcmFtZSA9IGdldEZyYW1lQnlJZChcImZpcnN0LXRhYi1mcmFtZVwiKTtcclxuXHJcbiAgICBmaXJzdEZyYW1lLm5hdmlnYXRlKHtcclxuICAgICAgICBtb2R1bGVOYW1lOiBjb21wb25lbnRSb3V0ZSxcclxuICAgICAgICB0cmFuc2l0aW9uOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiZmFkZVwiXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHRhYlZpZXcuc2VsZWN0ZWRJbmRleCA9IDA7IC8vIGV4cGxpY2l0bHkgY2hhbmdlIHRoZSB0YWIgaW4gd2hpY2ggd2UgYXJlIGN1cnJlbnRseSBuYXZpZ2F0aW5nXHJcblxyXG4gICAgZHJhd2VyID0gPFJhZFNpZGVEcmF3ZXI+YXBwLmdldFJvb3RWaWV3KCk7XHJcbiAgICBkcmF3ZXIuY2xvc2VEcmF3ZXIoKTsgLy8gZXhwbGljaXRseSBjbG9zaW5nIHRoZSBkcmF3ZXIgYWZ0ZXIgdGhlIG5hdmlnYXRpb24gaXMgdHJpZ2dlcmVkXHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGVJblNlY29uZFRhYihhcmdzOiBFdmVudERhdGEpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IDxHcmlkTGF5b3V0PmFyZ3Mub2JqZWN0O1xyXG4gICAgY29uc3QgY29tcG9uZW50Um91dGUgPSBjb21wb25lbnQuZ2V0KFwicm91dGVcIik7XHJcblxyXG4gICAgbGV0IHNlY29uZEZyYW1lID0gZ2V0RnJhbWVCeUlkKFwic2Vjb25kLXRhYi1mcmFtZVwiKTtcclxuXHJcbiAgICBzZWNvbmRGcmFtZS5uYXZpZ2F0ZSh7XHJcbiAgICAgICAgbW9kdWxlTmFtZTogY29tcG9uZW50Um91dGUsXHJcbiAgICAgICAgdHJhbnNpdGlvbjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcInNsaWRlXCJcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgdGFiVmlldy5zZWxlY3RlZEluZGV4ID0gMTsgLy8gZXhwbGljaXRseSBjaGFuZ2UgdGhlIHRhYiBpbiB3aGljaCB3ZSBhcmUgY3VycmVudGx5IG5hdmlnYXRpbmdcclxuXHJcbiAgICBkcmF3ZXIgPSA8UmFkU2lkZURyYXdlcj5hcHAuZ2V0Um9vdFZpZXcoKTtcclxuICAgIGRyYXdlci5jbG9zZURyYXdlcigpOyAvLyBleHBsaWNpdGx5IGNsb3NpbmcgdGhlIGRyYXdlciBhZnRlciB0aGUgbmF2aWdhdGlvbiBpcyB0cmlnZ2VyZWRcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVEcmF3ZXIoKSB7XHJcbiAgICBkcmF3ZXIudG9nZ2xlRHJhd2VyU3RhdGUoKTtcclxufSJdfQ==