"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var myImage1;
var myImage2;
var myImage3;
var myImage4;
function navigatingTo(args) {
    var page = args.object;
}
exports.navigatingTo = navigatingTo;
function animate() {
    myImage1.animate({
        iterations: 10000,
        duration: 2000,
        translate: {
            x: 0,
            y: 200
        },
        scale: {
            x: 4,
            y: 4
        }
    }).then(function () {
        console.log("Animation finished");
    }).catch(function (e) {
        console.log(e.message);
    });
    myImage2.animate({
        iterations: 10000,
        duration: 2000,
        translate: {
            x: 100,
            y: 200
        },
        scale: {
            x: 4,
            y: 4
        }
    }).then(function () {
        console.log("Animation finished");
    }).catch(function (e) {
        console.log(e.message);
    });
    myImage3.animate({
        iterations: 10000,
        duration: 1000,
        translate: {
            x: 100,
            y: 300
        },
        scale: {
            x: 4,
            y: 4
        }
    }).then(function () {
        console.log("Animation finished");
    }).catch(function (e) {
        console.log(e.message);
    });
    myImage4.animate({
        iterations: 10000,
        duration: 2000,
        scale: {
            x: 4,
            y: 4
        }
    }).then(function () {
        console.log("Animation finished");
    }).catch(function (e) {
        console.log(e.message);
    });
}
exports.animate = animate;
function onImage1Loaded(args) {
    myImage1 = args.object;
}
exports.onImage1Loaded = onImage1Loaded;
function onImage2Loaded(args) {
    myImage2 = args.object;
}
exports.onImage2Loaded = onImage2Loaded;
function onImagе3Loaded(args) {
    myImage3 = args.object;
}
exports.onImagе3Loaded = onImagе3Loaded;
function onImage4Loaded(args) {
    myImage4 = args.object;
}
exports.onImage4Loaded = onImage4Loaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsSUFBSSxRQUFhLENBQUM7QUFDbEIsSUFBSSxRQUFhLENBQUM7QUFDbEIsSUFBSSxRQUFhLENBQUM7QUFDbEIsSUFBSSxRQUFhLENBQUM7QUFFbEIsc0JBQTZCLElBQWU7SUFDeEMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNqQyxDQUFDO0FBRkQsb0NBRUM7QUFFRDtJQUNJLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDYixVQUFVLEVBQUUsS0FBSztRQUNqQixRQUFRLEVBQUUsSUFBSTtRQUNkLFNBQVMsRUFBRTtZQUNQLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLEdBQUc7U0FDVDtRQUNELEtBQUssRUFBRTtZQUNILENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7U0FDUDtLQUNKLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQztRQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUNiLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFFBQVEsRUFBRSxJQUFJO1FBQ2QsU0FBUyxFQUFFO1lBQ1AsQ0FBQyxFQUFFLEdBQUc7WUFDTixDQUFDLEVBQUUsR0FBRztTQUNUO1FBQ0QsS0FBSyxFQUFFO1lBQ0gsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztTQUNQO0tBQ0osQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ2IsVUFBVSxFQUFFLEtBQUs7UUFDakIsUUFBUSxFQUFFLElBQUk7UUFDZCxTQUFTLEVBQUU7WUFDUCxDQUFDLEVBQUUsR0FBRztZQUNOLENBQUMsRUFBRSxHQUFHO1NBQ1Q7UUFDRCxLQUFLLEVBQUU7WUFDSCxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1NBQ1A7S0FDSixDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUM7UUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDYixVQUFVLEVBQUUsS0FBSztRQUNqQixRQUFRLEVBQUUsSUFBSTtRQUNkLEtBQUssRUFBRTtZQUNILENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7U0FDUDtLQUNKLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQztRQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWhFRCwwQkFnRUM7QUFDRCx3QkFBK0IsSUFBSTtJQUMvQixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQixDQUFDO0FBRkQsd0NBRUM7QUFDRCx3QkFBK0IsSUFBSTtJQUMvQixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQixDQUFDO0FBRkQsd0NBRUM7QUFDRCx3QkFBK0IsSUFBSTtJQUMvQixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQixDQUFDO0FBRkQsd0NBRUM7QUFDRCx3QkFBK0IsSUFBSTtJQUMvQixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQixDQUFDO0FBRkQsd0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xuXG5sZXQgbXlJbWFnZTE6IGFueTtcbmxldCBteUltYWdlMjogYW55O1xubGV0IG15SW1hZ2UzOiBhbnk7XG5sZXQgbXlJbWFnZTQ6IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcbiAgICBsZXQgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICBteUltYWdlMS5hbmltYXRlKHtcbiAgICAgICAgaXRlcmF0aW9uczogMTAwMDAsXG4gICAgICAgIGR1cmF0aW9uOiAyMDAwLFxuICAgICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAyMDBcbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgIHg6IDQsXG4gICAgICAgICAgICB5OiA0XG4gICAgICAgIH1cbiAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBbmltYXRpb24gZmluaXNoZWRcIik7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgICB9KTtcblxuICAgIG15SW1hZ2UyLmFuaW1hdGUoe1xuICAgICAgICBpdGVyYXRpb25zOiAxMDAwMCxcbiAgICAgICAgZHVyYXRpb246IDIwMDAsXG4gICAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICAgICAgeDogMTAwLFxuICAgICAgICAgICAgeTogMjAwXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICB4OiA0LFxuICAgICAgICAgICAgeTogNFxuICAgICAgICB9XG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQW5pbWF0aW9uIGZpbmlzaGVkXCIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgfSk7XG5cbiAgICBteUltYWdlMy5hbmltYXRlKHtcbiAgICAgICAgaXRlcmF0aW9uczogMTAwMDAsXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgICAgIHg6IDEwMCxcbiAgICAgICAgICAgIHk6IDMwMFxuICAgICAgICB9LFxuICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgeDogNCxcbiAgICAgICAgICAgIHk6IDRcbiAgICAgICAgfVxuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFuaW1hdGlvbiBmaW5pc2hlZFwiKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gICAgbXlJbWFnZTQuYW5pbWF0ZSh7XG4gICAgICAgIGl0ZXJhdGlvbnM6IDEwMDAwLFxuICAgICAgICBkdXJhdGlvbjogMjAwMCxcbiAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgIHg6IDQsXG4gICAgICAgICAgICB5OiA0XG4gICAgICAgIH1cbiAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBbmltYXRpb24gZmluaXNoZWRcIik7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvbkltYWdlMUxvYWRlZChhcmdzKSB7XG4gICAgbXlJbWFnZTEgPSBhcmdzLm9iamVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvbkltYWdlMkxvYWRlZChhcmdzKSB7XG4gICAgbXlJbWFnZTIgPSBhcmdzLm9iamVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvbkltYWfQtTNMb2FkZWQoYXJncykge1xuICAgIG15SW1hZ2UzID0gYXJncy5vYmplY3Q7XG59XG5leHBvcnQgZnVuY3Rpb24gb25JbWFnZTRMb2FkZWQoYXJncykge1xuICAgIG15SW1hZ2U0ID0gYXJncy5vYmplY3Q7XG59Il19