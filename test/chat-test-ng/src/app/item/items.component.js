"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var TypeUtils = require("tns-core-modules/utils/types");
var nativescript_chatview_1 = require("nativescript-chatview");
var ItemsComponent = /** @class */ (function () {
    function ItemsComponent() {
    }
    ItemsComponent.prototype.ngAfterViewInit = function () {
        this.stack = this.container.nativeElement;
        var chatView = this.createChatView();
        this.stack.addChild(chatView);
    };
    ItemsComponent.prototype.createChatView = function () {
        var _this = this;
        var chatView = new nativescript_chatview_1.ChatView();
        chatView.sendMessageButtonCaption = "Send";
        chatView.typeMessageHint = "Your message for Albert";
        chatView.notifyOnSendMessageTap(function (eventData) {
            console.log("notifyOnSendMessageTap");
            // eventData.object === chatView
            eventData.object.appendMessages({
                date: _this.getTime(),
                isRight: true,
                image: "res://icon",
                message: eventData.message,
            });
            eventData.resetMessage();
            eventData.scrollToBottom();
            eventData.focusTextField();
            // setTimeout for testing purposes only
            // in real life you would want to aappend the newly received message from the backend
            setTimeout(function () {
                chatView.appendMessages({
                    date: _this.getTime(),
                    isRight: false,
                    image: "~/img/alert.jpg",
                    message: _this.createAnswer(eventData.message),
                });
            }, Math.floor(Math.random() * 2000));
        });
        chatView.focusMessageField();
        return chatView;
    };
    ItemsComponent.prototype.getTime = function () {
        var now = new Date();
        var hours = now.getHours();
        return this.numberToString(hours == 12 ? 12 : (hours % 12)) + ":" + this.numberToString(now.getMinutes()) + " " +
            (hours < 13 ? "AM" : "PM");
    };
    ItemsComponent.prototype.numberToString = function (n) {
        var str = "" + n;
        if (n < 10) {
            str = "0" + str;
        }
        return str;
    };
    ItemsComponent.prototype.createAnswer = function (msg) {
        if (/(\s*)([0-9]+)(\.?)([0-9]*)(\s*)([\+|\-|\*|\/])(\s*)([0-9]+)(\.?)([0-9]*)/i.test(msg)) {
            var result;
            eval("result = " + msg + ";");
            return result;
        }
        else if (this.checkForAllTerms(this.getLettersAndDigitsOnly(msg), "how", "are", "you")) {
            return "Fine!";
        }
        else if (this.checkForAllTerms(this.getLettersAndDigitsOnly(msg), "what", "time", "is", "it")) {
            return this.getTime();
        }
        else if (this.checkForAllTerms(this.getLettersAndDigitsOnly(msg), "hi")) {
            return "Hi! How are you?";
        }
        else if (this.checkForAllTerms(this.getLettersAndDigitsOnly(msg), "fine")) {
            return "Cool!";
        }
        else {
            return 'You said: "' + msg + '"';
        }
    };
    ItemsComponent.prototype.checkForAllTerms = function (str) {
        var terms = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            terms[_i - 1] = arguments[_i];
        }
        var parts = str.split(" ");
        for (var i = 0; i < parts.length; i++) {
            var p = parts[i];
            if (p.trim() === "") {
                continue;
            }
            var found = false;
            for (var ii = 0; ii < terms.length; ii++) {
                var t = terms[ii];
                if (this.getSimilarity(p, t) >= 0.5) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                return false;
            }
        }
        return true;
    };
    ItemsComponent.prototype.getLettersAndDigitsOnly = function (str) {
        var result = "";
        for (var i = 0; i < str.length; i++) {
            if (/[a-zA-Z0-9]/i.test(str[i])) {
                result += str[i];
            }
            else if (/[\s]/i.test(str[i])) {
                result += " ";
            }
        }
        return result;
    };
    ItemsComponent.prototype.getSimilarity = function (left, right) {
        if (left === right) {
            return 1;
        }
        if (TypeUtils.isNullOrUndefined(left) ||
            TypeUtils.isNullOrUndefined(right)) {
            return 0;
        }
        left = left.toLowerCase().trim();
        right = right.toLowerCase().trim();
        var distance = 0;
        if (left !== right) {
            var matrix = new Array(left.length + 1);
            for (var i = 0; i < matrix.length; i++) {
                matrix[i] = new Array(right.length + 1);
                for (var ii = 0; ii < matrix[i].length; ii++) {
                    matrix[i][ii] = 0;
                }
            }
            for (var i = 0; i <= left.length; i++) {
                matrix[i][0] = i;
            }
            for (var j = 0; j <= right.length; j++) {
                matrix[0][j] = j;
            }
            for (var i = 0; i < left.length; i++) {
                for (var j = 0; j < right.length; j++) {
                    if (left[i] === right[j]) {
                        matrix[i + 1][j + 1] = matrix[i][j];
                    }
                    else {
                        matrix[i + 1][j + 1] = Math.min(matrix[i][j + 1] + 1, matrix[i + 1][j] + 1);
                        matrix[i + 1][j + 1] = Math.min(matrix[i + 1][j + 1], matrix[i][j] + 1);
                    }
                }
                distance = matrix[left.length][right.length];
            }
        }
        return 1.0 - distance / Math.max(left.length, right.length);
    };
    __decorate([
        core_1.ViewChild("container"),
        __metadata("design:type", core_1.ElementRef)
    ], ItemsComponent.prototype, "container", void 0);
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        })
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,