"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application_settings_1 = require("tns-core-modules/application-settings");
var application_1 = require("application");
var platform_1 = require("platform");
var utils = require("utils/utils");
function navigatingTo(args) {
    application_settings_1.setBoolean("isReal", true);
    application_settings_1.setNumber("myNumber", 42);
    application_settings_1.setString("myString", "John Doe");
}
exports.navigatingTo = navigatingTo;
function getAll() {
    var allKeys = [];
    if (platform_1.isAndroid) {
        var sharedPreferences = application_1.getNativeApplication().getApplicationContext().getSharedPreferences("prefs.db", 0);
        var mappedPreferences = sharedPreferences.getAll();
        var iterator = mappedPreferences.keySet().iterator();
        while (iterator.hasNext()) {
            var key = iterator.next();
            console.log(key); // myString, myNumbver, isReal
            var value = mappedPreferences.get(key);
            console.log(value); // "John Doe", 42, true
            allKeys.push(JSON.stringify(key));
        }
        console.log(allKeys);
    }
    else if (platform_1.isIOS) {
        var userDefaults = utils.ios.getter(NSUserDefaults, NSUserDefaults.standardUserDefaults);
        var dictionaryUserDefaults = userDefaults.dictionaryRepresentation;
        console.log(dictionaryUserDefaults);
    }
}
exports.getAll = getAll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsOEVBQXlGO0FBQ3pGLDJDQUFtRDtBQUNuRCxxQ0FBNEM7QUFDNUMsbUNBQXFDO0FBRXJDLHNCQUE2QixJQUFlO0lBQ3hDLGlDQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNCLGdDQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLGdDQUFTLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFKRCxvQ0FJQztBQUVEO0lBRUksSUFBSSxPQUFPLEdBQWtCLEVBQUUsQ0FBQztJQUVoQyxFQUFFLENBQUMsQ0FBQyxvQkFBUyxDQUFDLENBQUMsQ0FBQztRQUNaLElBQUksaUJBQWlCLEdBQTZCLGtDQUFvQixFQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEksSUFBSSxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNuRCxJQUFJLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVyRCxPQUFPLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBQ3hCLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsOEJBQThCO1lBRWhELElBQUksS0FBSyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsdUJBQXVCO1lBRTNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsZ0JBQUssQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLFlBQVksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDekYsSUFBSSxzQkFBc0IsR0FBRyxZQUFZLENBQUMsd0JBQXdCLENBQUM7UUFFbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7QUFDTCxDQUFDO0FBMUJELHdCQTBCQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAndG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgc2V0Qm9vbGVhbiwgc2V0TnVtYmVyLCBzZXRTdHJpbmcgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvbi1zZXR0aW5nc1wiO1xuaW1wb3J0IHsgZ2V0TmF0aXZlQXBwbGljYXRpb24gfSBmcm9tIFwiYXBwbGljYXRpb25cIjtcbmltcG9ydCB7IGlzQW5kcm9pZCwgaXNJT1MgfSBmcm9tIFwicGxhdGZvcm1cIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCJ1dGlscy91dGlsc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGluZ1RvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHNldEJvb2xlYW4oXCJpc1JlYWxcIiwgdHJ1ZSk7XG4gICAgc2V0TnVtYmVyKFwibXlOdW1iZXJcIiwgNDIpO1xuICAgIHNldFN0cmluZyhcIm15U3RyaW5nXCIsIFwiSm9obiBEb2VcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGwoKSB7XG4gIFxuICAgIGxldCBhbGxLZXlzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgICBpZiAoaXNBbmRyb2lkKSB7XG4gICAgICAgIGxldCBzaGFyZWRQcmVmZXJlbmNlcyA9ICg8YW5kcm9pZC5hcHAuQXBwbGljYXRpb24+Z2V0TmF0aXZlQXBwbGljYXRpb24oKSkuZ2V0QXBwbGljYXRpb25Db250ZXh0KCkuZ2V0U2hhcmVkUHJlZmVyZW5jZXMoXCJwcmVmcy5kYlwiLCAwKTtcbiAgICAgICAgbGV0IG1hcHBlZFByZWZlcmVuY2VzID0gc2hhcmVkUHJlZmVyZW5jZXMuZ2V0QWxsKCk7XG4gICAgICAgIGxldCBpdGVyYXRvciA9IG1hcHBlZFByZWZlcmVuY2VzLmtleVNldCgpLml0ZXJhdG9yKCk7XG5cbiAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSkge1xuICAgICAgICAgICAgbGV0IGtleSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGtleSk7IC8vIG15U3RyaW5nLCBteU51bWJ2ZXIsIGlzUmVhbFxuXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBtYXBwZWRQcmVmZXJlbmNlcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTsgLy8gXCJKb2huIERvZVwiLCA0MiwgdHJ1ZVxuXG4gICAgICAgICAgICBhbGxLZXlzLnB1c2goSlNPTi5zdHJpbmdpZnkoa2V5KSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhhbGxLZXlzKTtcbiAgICB9IGVsc2UgaWYgKGlzSU9TKSB7XG4gICAgICAgIHZhciB1c2VyRGVmYXVsdHMgPSB1dGlscy5pb3MuZ2V0dGVyKE5TVXNlckRlZmF1bHRzLCBOU1VzZXJEZWZhdWx0cy5zdGFuZGFyZFVzZXJEZWZhdWx0cyk7XG4gICAgICAgIGxldCBkaWN0aW9uYXJ5VXNlckRlZmF1bHRzID0gdXNlckRlZmF1bHRzLmRpY3Rpb25hcnlSZXByZXNlbnRhdGlvbjtcblxuICAgICAgICBjb25zb2xlLmxvZyhkaWN0aW9uYXJ5VXNlckRlZmF1bHRzKTtcbiAgICB9XG59Il19